/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preserve that ability, always export from Quest to regenerate this file.
 *   To setup element attributes and CSS properties, use the Quest web app
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from 'react';
import { Typography, Divider } from '@mui/material';
import { styled } from '@mui/material/styles';
import { EntityInfoTableProps } from 'src/types';

const EntityInfoTable1: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  width: '100%',
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  height: 'auto',
});

const Row1: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const Cell1: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `6px 16px 6px 0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Box1: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Typography1: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body2'].fontStyle,
  fontFamily: theme.typography['Typography']['body2'].fontFamily,
  fontWeight: theme.typography['Typography']['body2'].fontWeight,
  fontSize: theme.typography['Typography']['body2'].fontSize,
  letterSpacing: theme.typography['Typography']['body2'].letterSpacing,
  lineHeight: theme.typography['Typography']['body2'].lineHeight,
  textDecoration: theme.typography['Typography']['body2'].textDecoration,
  textTransform: theme.typography['Typography']['body2'].textTransform,
}));

const Typography2: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body2'].fontStyle,
  fontFamily: theme.typography['Typography']['body2'].fontFamily,
  fontWeight: theme.typography['Typography']['body2'].fontWeight,
  fontSize: theme.typography['Typography']['body2'].fontSize,
  letterSpacing: theme.typography['Typography']['body2'].letterSpacing,
  lineHeight: theme.typography['Typography']['body2'].lineHeight,
  textDecoration: theme.typography['Typography']['body2'].textDecoration,
  textTransform: theme.typography['Typography']['body2'].textTransform,
}));

const Cell2: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `6px 16px`,
  boxSizing: `border-box`,
  margin: `0px`,
});

const Box2: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  width: `108px`,
  margin: `0px`,
});

const Typography3: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
}));

const Typography4: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body2'].fontStyle,
  fontFamily: theme.typography['Typography']['body2'].fontFamily,
  fontWeight: theme.typography['Typography']['body2'].fontWeight,
  fontSize: theme.typography['Typography']['body2'].fontSize,
  letterSpacing: theme.typography['Typography']['body2'].letterSpacing,
  lineHeight: theme.typography['Typography']['body2'].lineHeight,
  textDecoration: theme.typography['Typography']['body2'].textDecoration,
  textTransform: theme.typography['Typography']['body2'].textTransform,
}));

const Cell3: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `6px 0px 6px 16px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Box3: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-end`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Typography5: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body2'].fontStyle,
  fontFamily: theme.typography['Typography']['body2'].fontFamily,
  fontWeight: theme.typography['Typography']['body2'].fontWeight,
  fontSize: theme.typography['Typography']['body2'].fontSize,
  letterSpacing: theme.typography['Typography']['body2'].letterSpacing,
  lineHeight: theme.typography['Typography']['body2'].lineHeight,
  textDecoration: theme.typography['Typography']['body2'].textDecoration,
  textTransform: theme.typography['Typography']['body2'].textTransform,
}));

const Typography6: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body2'].fontStyle,
  fontFamily: theme.typography['Typography']['body2'].fontFamily,
  fontWeight: theme.typography['Typography']['body2'].fontWeight,
  fontSize: theme.typography['Typography']['body2'].fontSize,
  letterSpacing: theme.typography['Typography']['body2'].letterSpacing,
  lineHeight: theme.typography['Typography']['body2'].lineHeight,
  textDecoration: theme.typography['Typography']['body2'].textDecoration,
  textTransform: theme.typography['Typography']['body2'].textTransform,
}));

const DividerHorizontal: any = styled(Divider)(({ theme }: any) => ({
  width: `285px`,
  position: `absolute`,
  left: `0px`,
  top: `51px`,
}));

const Row2: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const Cell11: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `6px 16px 6px 0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Box4: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Typography7: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body2'].fontStyle,
  fontFamily: theme.typography['Typography']['body2'].fontFamily,
  fontWeight: theme.typography['Typography']['body2'].fontWeight,
  fontSize: theme.typography['Typography']['body2'].fontSize,
  letterSpacing: theme.typography['Typography']['body2'].letterSpacing,
  lineHeight: theme.typography['Typography']['body2'].lineHeight,
  textDecoration: theme.typography['Typography']['body2'].textDecoration,
  textTransform: theme.typography['Typography']['body2'].textTransform,
}));

const Typography8: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body2'].fontStyle,
  fontFamily: theme.typography['Typography']['body2'].fontFamily,
  fontWeight: theme.typography['Typography']['body2'].fontWeight,
  fontSize: theme.typography['Typography']['body2'].fontSize,
  letterSpacing: theme.typography['Typography']['body2'].letterSpacing,
  lineHeight: theme.typography['Typography']['body2'].lineHeight,
  textDecoration: theme.typography['Typography']['body2'].textDecoration,
  textTransform: theme.typography['Typography']['body2'].textTransform,
}));

const Cell21: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `6px 16px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Box5: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Typography9: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
}));

const Typography10: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body2'].fontStyle,
  fontFamily: theme.typography['Typography']['body2'].fontFamily,
  fontWeight: theme.typography['Typography']['body2'].fontWeight,
  fontSize: theme.typography['Typography']['body2'].fontSize,
  letterSpacing: theme.typography['Typography']['body2'].letterSpacing,
  lineHeight: theme.typography['Typography']['body2'].lineHeight,
  textDecoration: theme.typography['Typography']['body2'].textDecoration,
  textTransform: theme.typography['Typography']['body2'].textTransform,
}));

const Cell31: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `6px 0px 6px 16px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Box6: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-end`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Typography11: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body2'].fontStyle,
  fontFamily: theme.typography['Typography']['body2'].fontFamily,
  fontWeight: theme.typography['Typography']['body2'].fontWeight,
  fontSize: theme.typography['Typography']['body2'].fontSize,
  letterSpacing: theme.typography['Typography']['body2'].letterSpacing,
  lineHeight: theme.typography['Typography']['body2'].lineHeight,
  textDecoration: theme.typography['Typography']['body2'].textDecoration,
  textTransform: theme.typography['Typography']['body2'].textTransform,
}));

const Typography12: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body2'].fontStyle,
  fontFamily: theme.typography['Typography']['body2'].fontFamily,
  fontWeight: theme.typography['Typography']['body2'].fontWeight,
  fontSize: theme.typography['Typography']['body2'].fontSize,
  letterSpacing: theme.typography['Typography']['body2'].letterSpacing,
  lineHeight: theme.typography['Typography']['body2'].lineHeight,
  textDecoration: theme.typography['Typography']['body2'].textDecoration,
  textTransform: theme.typography['Typography']['body2'].textTransform,
}));

const DividerHorizontal1: any = styled(Divider)(({ theme }: any) => ({
  width: `285px`,
  position: `absolute`,
  left: `0px`,
  top: `51px`,
}));

const Row3: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const Cell12: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `6px 16px 6px 0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Box7: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Typography13: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body2'].fontStyle,
  fontFamily: theme.typography['Typography']['body2'].fontFamily,
  fontWeight: theme.typography['Typography']['body2'].fontWeight,
  fontSize: theme.typography['Typography']['body2'].fontSize,
  letterSpacing: theme.typography['Typography']['body2'].letterSpacing,
  lineHeight: theme.typography['Typography']['body2'].lineHeight,
  textDecoration: theme.typography['Typography']['body2'].textDecoration,
  textTransform: theme.typography['Typography']['body2'].textTransform,
}));

const Typography14: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body2'].fontStyle,
  fontFamily: theme.typography['Typography']['body2'].fontFamily,
  fontWeight: theme.typography['Typography']['body2'].fontWeight,
  fontSize: theme.typography['Typography']['body2'].fontSize,
  letterSpacing: theme.typography['Typography']['body2'].letterSpacing,
  lineHeight: theme.typography['Typography']['body2'].lineHeight,
  textDecoration: theme.typography['Typography']['body2'].textDecoration,
  textTransform: theme.typography['Typography']['body2'].textTransform,
}));

const Cell22: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `6px 16px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Box8: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Typography15: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
}));

const Typography16: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body2'].fontStyle,
  fontFamily: theme.typography['Typography']['body2'].fontFamily,
  fontWeight: theme.typography['Typography']['body2'].fontWeight,
  fontSize: theme.typography['Typography']['body2'].fontSize,
  letterSpacing: theme.typography['Typography']['body2'].letterSpacing,
  lineHeight: theme.typography['Typography']['body2'].lineHeight,
  textDecoration: theme.typography['Typography']['body2'].textDecoration,
  textTransform: theme.typography['Typography']['body2'].textTransform,
}));

const Cell32: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `6px 0px 6px 16px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Box9: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-end`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Typography17: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body2'].fontStyle,
  fontFamily: theme.typography['Typography']['body2'].fontFamily,
  fontWeight: theme.typography['Typography']['body2'].fontWeight,
  fontSize: theme.typography['Typography']['body2'].fontSize,
  letterSpacing: theme.typography['Typography']['body2'].letterSpacing,
  lineHeight: theme.typography['Typography']['body2'].lineHeight,
  textDecoration: theme.typography['Typography']['body2'].textDecoration,
  textTransform: theme.typography['Typography']['body2'].textTransform,
}));

const Typography18: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body2'].fontStyle,
  fontFamily: theme.typography['Typography']['body2'].fontFamily,
  fontWeight: theme.typography['Typography']['body2'].fontWeight,
  fontSize: theme.typography['Typography']['body2'].fontSize,
  letterSpacing: theme.typography['Typography']['body2'].letterSpacing,
  lineHeight: theme.typography['Typography']['body2'].lineHeight,
  textDecoration: theme.typography['Typography']['body2'].textDecoration,
  textTransform: theme.typography['Typography']['body2'].textTransform,
}));

const DividerHorizontal2: any = styled(Divider)(({ theme }: any) => ({
  width: `285px`,
  position: `absolute`,
  left: `0px`,
  top: `51px`,
}));

const Row4: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const Cell13: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `6px 16px 6px 0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Box10: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Typography19: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body2'].fontStyle,
  fontFamily: theme.typography['Typography']['body2'].fontFamily,
  fontWeight: theme.typography['Typography']['body2'].fontWeight,
  fontSize: theme.typography['Typography']['body2'].fontSize,
  letterSpacing: theme.typography['Typography']['body2'].letterSpacing,
  lineHeight: theme.typography['Typography']['body2'].lineHeight,
  textDecoration: theme.typography['Typography']['body2'].textDecoration,
  textTransform: theme.typography['Typography']['body2'].textTransform,
}));

const Typography20: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body2'].fontStyle,
  fontFamily: theme.typography['Typography']['body2'].fontFamily,
  fontWeight: theme.typography['Typography']['body2'].fontWeight,
  fontSize: theme.typography['Typography']['body2'].fontSize,
  letterSpacing: theme.typography['Typography']['body2'].letterSpacing,
  lineHeight: theme.typography['Typography']['body2'].lineHeight,
  textDecoration: theme.typography['Typography']['body2'].textDecoration,
  textTransform: theme.typography['Typography']['body2'].textTransform,
}));

const Cell23: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `6px 16px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Box11: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Typography21: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
}));

const Typography22: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body2'].fontStyle,
  fontFamily: theme.typography['Typography']['body2'].fontFamily,
  fontWeight: theme.typography['Typography']['body2'].fontWeight,
  fontSize: theme.typography['Typography']['body2'].fontSize,
  letterSpacing: theme.typography['Typography']['body2'].letterSpacing,
  lineHeight: theme.typography['Typography']['body2'].lineHeight,
  textDecoration: theme.typography['Typography']['body2'].textDecoration,
  textTransform: theme.typography['Typography']['body2'].textTransform,
}));

const Cell33: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `6px 0px 6px 16px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Box12: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-end`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Typography23: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body2'].fontStyle,
  fontFamily: theme.typography['Typography']['body2'].fontFamily,
  fontWeight: theme.typography['Typography']['body2'].fontWeight,
  fontSize: theme.typography['Typography']['body2'].fontSize,
  letterSpacing: theme.typography['Typography']['body2'].letterSpacing,
  lineHeight: theme.typography['Typography']['body2'].lineHeight,
  textDecoration: theme.typography['Typography']['body2'].textDecoration,
  textTransform: theme.typography['Typography']['body2'].textTransform,
}));

const Typography24: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body2'].fontStyle,
  fontFamily: theme.typography['Typography']['body2'].fontFamily,
  fontWeight: theme.typography['Typography']['body2'].fontWeight,
  fontSize: theme.typography['Typography']['body2'].fontSize,
  letterSpacing: theme.typography['Typography']['body2'].letterSpacing,
  lineHeight: theme.typography['Typography']['body2'].lineHeight,
  textDecoration: theme.typography['Typography']['body2'].textDecoration,
  textTransform: theme.typography['Typography']['body2'].textTransform,
}));

const DividerHorizontal3: any = styled(Divider)(({ theme }: any) => ({
  width: `285px`,
  position: `absolute`,
  left: `0px`,
  top: `51px`,
}));

const Row5: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const Cell14: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `6px 16px 6px 0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Box13: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Typography25: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body2'].fontStyle,
  fontFamily: theme.typography['Typography']['body2'].fontFamily,
  fontWeight: theme.typography['Typography']['body2'].fontWeight,
  fontSize: theme.typography['Typography']['body2'].fontSize,
  letterSpacing: theme.typography['Typography']['body2'].letterSpacing,
  lineHeight: theme.typography['Typography']['body2'].lineHeight,
  textDecoration: theme.typography['Typography']['body2'].textDecoration,
  textTransform: theme.typography['Typography']['body2'].textTransform,
}));

const Typography26: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body2'].fontStyle,
  fontFamily: theme.typography['Typography']['body2'].fontFamily,
  fontWeight: theme.typography['Typography']['body2'].fontWeight,
  fontSize: theme.typography['Typography']['body2'].fontSize,
  letterSpacing: theme.typography['Typography']['body2'].letterSpacing,
  lineHeight: theme.typography['Typography']['body2'].lineHeight,
  textDecoration: theme.typography['Typography']['body2'].textDecoration,
  textTransform: theme.typography['Typography']['body2'].textTransform,
}));

const Cell24: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `6px 16px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Box14: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Typography27: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
}));

const Typography28: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body2'].fontStyle,
  fontFamily: theme.typography['Typography']['body2'].fontFamily,
  fontWeight: theme.typography['Typography']['body2'].fontWeight,
  fontSize: theme.typography['Typography']['body2'].fontSize,
  letterSpacing: theme.typography['Typography']['body2'].letterSpacing,
  lineHeight: theme.typography['Typography']['body2'].lineHeight,
  textDecoration: theme.typography['Typography']['body2'].textDecoration,
  textTransform: theme.typography['Typography']['body2'].textTransform,
}));

const Cell34: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `6px 0px 6px 16px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Box15: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-end`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Typography29: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body2'].fontStyle,
  fontFamily: theme.typography['Typography']['body2'].fontFamily,
  fontWeight: theme.typography['Typography']['body2'].fontWeight,
  fontSize: theme.typography['Typography']['body2'].fontSize,
  letterSpacing: theme.typography['Typography']['body2'].letterSpacing,
  lineHeight: theme.typography['Typography']['body2'].lineHeight,
  textDecoration: theme.typography['Typography']['body2'].textDecoration,
  textTransform: theme.typography['Typography']['body2'].textTransform,
}));

const Typography30: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body2'].fontStyle,
  fontFamily: theme.typography['Typography']['body2'].fontFamily,
  fontWeight: theme.typography['Typography']['body2'].fontWeight,
  fontSize: theme.typography['Typography']['body2'].fontSize,
  letterSpacing: theme.typography['Typography']['body2'].letterSpacing,
  lineHeight: theme.typography['Typography']['body2'].lineHeight,
  textDecoration: theme.typography['Typography']['body2'].textDecoration,
  textTransform: theme.typography['Typography']['body2'].textTransform,
}));

const DividerHorizontal4: any = styled(Divider)(({ theme }: any) => ({
  width: `285px`,
  position: `absolute`,
  left: `0px`,
  top: `51px`,
}));

const Row6: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const Cell15: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `6px 16px 6px 0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Box16: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Typography31: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body2'].fontStyle,
  fontFamily: theme.typography['Typography']['body2'].fontFamily,
  fontWeight: theme.typography['Typography']['body2'].fontWeight,
  fontSize: theme.typography['Typography']['body2'].fontSize,
  letterSpacing: theme.typography['Typography']['body2'].letterSpacing,
  lineHeight: theme.typography['Typography']['body2'].lineHeight,
  textDecoration: theme.typography['Typography']['body2'].textDecoration,
  textTransform: theme.typography['Typography']['body2'].textTransform,
}));

const Typography32: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body2'].fontStyle,
  fontFamily: theme.typography['Typography']['body2'].fontFamily,
  fontWeight: theme.typography['Typography']['body2'].fontWeight,
  fontSize: theme.typography['Typography']['body2'].fontSize,
  letterSpacing: theme.typography['Typography']['body2'].letterSpacing,
  lineHeight: theme.typography['Typography']['body2'].lineHeight,
  textDecoration: theme.typography['Typography']['body2'].textDecoration,
  textTransform: theme.typography['Typography']['body2'].textTransform,
}));

const Cell25: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `6px 16px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Box17: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Typography33: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
}));

const Typography34: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body2'].fontStyle,
  fontFamily: theme.typography['Typography']['body2'].fontFamily,
  fontWeight: theme.typography['Typography']['body2'].fontWeight,
  fontSize: theme.typography['Typography']['body2'].fontSize,
  letterSpacing: theme.typography['Typography']['body2'].letterSpacing,
  lineHeight: theme.typography['Typography']['body2'].lineHeight,
  textDecoration: theme.typography['Typography']['body2'].textDecoration,
  textTransform: theme.typography['Typography']['body2'].textTransform,
}));

const Cell35: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `6px 0px 6px 16px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Box18: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-end`,
  padding: `0px`,
  boxSizing: `border-box`,
  flex: `1`,
  margin: `0px`,
});

const Typography35: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body2'].fontStyle,
  fontFamily: theme.typography['Typography']['body2'].fontFamily,
  fontWeight: theme.typography['Typography']['body2'].fontWeight,
  fontSize: theme.typography['Typography']['body2'].fontSize,
  letterSpacing: theme.typography['Typography']['body2'].letterSpacing,
  lineHeight: theme.typography['Typography']['body2'].lineHeight,
  textDecoration: theme.typography['Typography']['body2'].textDecoration,
  textTransform: theme.typography['Typography']['body2'].textTransform,
}));

const Typography36: any = styled(Typography)(({ theme }: any) => ({
  margin: `0px`,
  color: theme.palette['text']['primary'],
  fontStyle: theme.typography['Typography']['body2'].fontStyle,
  fontFamily: theme.typography['Typography']['body2'].fontFamily,
  fontWeight: theme.typography['Typography']['body2'].fontWeight,
  fontSize: theme.typography['Typography']['body2'].fontSize,
  letterSpacing: theme.typography['Typography']['body2'].letterSpacing,
  lineHeight: theme.typography['Typography']['body2'].lineHeight,
  textDecoration: theme.typography['Typography']['body2'].textDecoration,
  textTransform: theme.typography['Typography']['body2'].textTransform,
}));

const DividerHorizontal5: any = styled(Divider)(({ theme }: any) => ({
  width: `285px`,
  position: `absolute`,
  left: `0px`,
  top: `51px`,
}));

function EntityInfoTable(props: EntityInfoTableProps): JSX.Element {
  return (
    <EntityInfoTable1 className={props.className}>
      <Row1>
        <Cell1>
          <Box1>
            <Typography1 variant={'body2'} gutterBottom={false}>
              {'Entity Type'}
            </Typography1>
            {false && (
              <Typography2 variant={'body2'} gutterBottom={false}>
                {'Cell'}
              </Typography2>
            )}
          </Box1>
        </Cell1>
        {false && (
          <Cell2>
            <Box2>
              <Typography3 variant={'body2'} gutterBottom={false}></Typography3>
              {false && (
                <Typography4 variant={'body2'} gutterBottom={false}>
                  {'Cell'}
                </Typography4>
              )}
            </Box2>
          </Cell2>
        )}
        <Cell3>
          <Box3>
            <Typography5 variant={'body2'} gutterBottom={false}>
              {`{Value}`}
            </Typography5>
            {false && (
              <Typography6 variant={'body2'} gutterBottom={false}>
                {'Cell'}
              </Typography6>
            )}
          </Box3>
        </Cell3>
        {false && <DividerHorizontal orientation="horizontal" />}
      </Row1>
      <Row2>
        <Cell11>
          <Box4>
            <Typography7 variant={'body2'} gutterBottom={false}>
              {'Tax ID'}
            </Typography7>
            {false && (
              <Typography8 variant={'body2'} gutterBottom={false}>
                {'Cell'}
              </Typography8>
            )}
          </Box4>
        </Cell11>
        {false && (
          <Cell21>
            <Box5>
              <Typography9 variant={'body2'} gutterBottom={false}></Typography9>
              {false && (
                <Typography10 variant={'body2'} gutterBottom={false}>
                  {'Cell'}
                </Typography10>
              )}
            </Box5>
          </Cell21>
        )}
        <Cell31>
          <Box6>
            <Typography11 variant={'body2'} gutterBottom={false}>
              {`{Value}`}
            </Typography11>
            {false && (
              <Typography12 variant={'body2'} gutterBottom={false}>
                {'Cell'}
              </Typography12>
            )}
          </Box6>
        </Cell31>
        {false && <DividerHorizontal1 orientation="horizontal" />}
      </Row2>
      <Row3>
        <Cell12>
          <Box7>
            <Typography13 variant={'body2'} gutterBottom={false}>
              {'Foreign Investor'}
            </Typography13>
            {false && (
              <Typography14 variant={'body2'} gutterBottom={false}>
                {'Cell'}
              </Typography14>
            )}
          </Box7>
        </Cell12>
        {false && (
          <Cell22>
            <Box8>
              <Typography15
                variant={'body2'}
                gutterBottom={false}
              ></Typography15>
              {false && (
                <Typography16 variant={'body2'} gutterBottom={false}>
                  {'Cell'}
                </Typography16>
              )}
            </Box8>
          </Cell22>
        )}
        <Cell32>
          <Box9>
            <Typography17 variant={'body2'} gutterBottom={false}>
              {`{Value}`}
            </Typography17>
            {false && (
              <Typography18 variant={'body2'} gutterBottom={false}>
                {'Cell'}
              </Typography18>
            )}
          </Box9>
        </Cell32>
        {false && <DividerHorizontal2 orientation="horizontal" />}
      </Row3>
      <Row4>
        <Cell13>
          <Box10>
            <Typography19 variant={'body2'} gutterBottom={false}>
              {'Accreditation'}
            </Typography19>
            {false && (
              <Typography20 variant={'body2'} gutterBottom={false}>
                {'Cell'}
              </Typography20>
            )}
          </Box10>
        </Cell13>
        {false && (
          <Cell23>
            <Box11>
              <Typography21
                variant={'body2'}
                gutterBottom={false}
              ></Typography21>
              {false && (
                <Typography22 variant={'body2'} gutterBottom={false}>
                  {'Cell'}
                </Typography22>
              )}
            </Box11>
          </Cell23>
        )}
        <Cell33>
          <Box12>
            <Typography23 variant={'body2'} gutterBottom={false}>
              {`{Value}`}
            </Typography23>
            {false && (
              <Typography24 variant={'body2'} gutterBottom={false}>
                {'Cell'}
              </Typography24>
            )}
          </Box12>
        </Cell33>
        {false && <DividerHorizontal3 orientation="horizontal" />}
      </Row4>
      <Row5>
        <Cell14>
          <Box13>
            <Typography25 variant={'body2'} gutterBottom={false}>
              {'Control Person Exempt'}
            </Typography25>
            {false && (
              <Typography26 variant={'body2'} gutterBottom={false}>
                {'Cell'}
              </Typography26>
            )}
          </Box13>
        </Cell14>
        {false && (
          <Cell24>
            <Box14>
              <Typography27
                variant={'body2'}
                gutterBottom={false}
              ></Typography27>
              {false && (
                <Typography28 variant={'body2'} gutterBottom={false}>
                  {'Cell'}
                </Typography28>
              )}
            </Box14>
          </Cell24>
        )}
        <Cell34>
          <Box15>
            <Typography29 variant={'body2'} gutterBottom={false}>
              {`{Value}`}
            </Typography29>
            {false && (
              <Typography30 variant={'body2'} gutterBottom={false}>
                {'Cell'}
              </Typography30>
            )}
          </Box15>
        </Cell34>
        {false && <DividerHorizontal4 orientation="horizontal" />}
      </Row5>
      <Row6>
        <Cell15>
          <Box16>
            <Typography31 variant={'body2'} gutterBottom={false}>
              {'Exempt Reason'}
            </Typography31>
            {false && (
              <Typography32 variant={'body2'} gutterBottom={false}>
                {'Cell'}
              </Typography32>
            )}
          </Box16>
        </Cell15>
        {false && (
          <Cell25>
            <Box17>
              <Typography33
                variant={'body2'}
                gutterBottom={false}
              ></Typography33>
              {false && (
                <Typography34 variant={'body2'} gutterBottom={false}>
                  {'Cell'}
                </Typography34>
              )}
            </Box17>
          </Cell25>
        )}
        <Cell35>
          <Box18>
            <Typography35 variant={'body2'} gutterBottom={false}>
              {`{Value}`}
            </Typography35>
            {false && (
              <Typography36 variant={'body2'} gutterBottom={false}>
                {'Cell'}
              </Typography36>
            )}
          </Box18>
        </Cell35>
        {false && <DividerHorizontal5 orientation="horizontal" />}
      </Row6>
    </EntityInfoTable1>
  );
}

export default EntityInfoTable;
